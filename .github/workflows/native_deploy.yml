name: native-package-test-deploy
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build-test-package:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      # Expose secrets; if undefined they expand to empty
      DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
      DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
      DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-production.txt ]; then pip install -r requirements-production.txt; elif [ -f requirements.txt ]; then pip install -r requirements.txt; else echo "No requirements file"; fi
          pip install gunicorn uvicorn
      - name: Run tests
        run: |
          if [ -d tests ]; then pytest -q; else echo 'No tests'; fi
      - name: Package artifact
        run: |
          mkdir -p dist
          tar -czf dist/mapmystandards_$(date +%Y%m%d_%H%M%S).tar.gz requirements.txt subscription_backend.py src web native_deploy Dockerfile || true
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
            name: mapmystandards-native
            path: dist/*.tar.gz

      - name: Deploy (SSH)
        if: github.ref == 'refs/heads/main' && env.DEPLOY_HOST && env.DEPLOY_USER && env.DEPLOY_KEY
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.DEPLOY_KEY }}
          script: |
            set -e
            echo "Deploying MapMyStandards package on $(hostname)" 
            mkdir -p ~/deploy/mapmystandards
            ls -1 dist | tail -n 1 | while read f; do
              echo "Using artifact $f"
            done
            # (Add real deployment commands here e.g., extract tar, restart service)


  
